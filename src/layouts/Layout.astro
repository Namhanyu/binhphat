---
const { title = "Bình Phát", snap = true } = Astro.props;
import "../styles/global.css";
import "../styles/common.css";
import "@fontsource/montserrat";
import "@fontsource/montserrat/500.css";
import "@fontsource/montserrat/600.css";
import "@fontsource/montserrat/700.css";
import "@fontsource/montserrat/800.css";
import "@fontsource/montserrat/900.css";

import Header from "../components/organisms/Header.astro";
import ContactSection from "../components/organisms/ContactSection.astro";
import { getLangFromUrl } from "../i18n/utils";
import clsx from "clsx";

const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- HTML Meta Tags -->
    <title>{title}</title>
    <meta name="description" content="Bình Phát" />

    <!-- Google / Search Engine Tags -->
    <meta itemprop="name" content="Bình Phát" />
    <meta itemprop="description" content="Bình Phát" />
    <meta itemprop="image" content="/01.webp" />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://binhphat.vercel.app/" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Bình Phát" />
    <meta property="og:description" content="Bình Phát" />
    <meta property="og:image" content="/01.webp" />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Bình Phát" />
    <meta name="twitter:description" content="Bình Phát" />
    <meta name="twitter:image" content="/01.webp" />
  </head>
  <body class="overflow-x-hidden max-md:text-[14px]">
    <Header />
    <div
      id="snap-container"
      class={clsx({
        "enable-snap lg:snap-mandatory lg:snap-y [&>_*]:snap-start overflow-y-scroll h-screen overflow-x-hidden":
          snap,
      })}
    >
      <slot />
      <ContactSection />
    </div>
  </body>
</html>

<script type="module" is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("[data-menu-color]");
    const header = document.querySelector("#header");
    const headerHeight = header ? header.offsetHeight : 0;
    const pageCount = sections.length;

    function applyColor(color) {
      const isWhite = color === "white";
      if (isWhite) {
        header.classList.add("text-white");
        header.classList.remove("text-primary");
        header.classList.add("before:bg-gradient-to-b");
      } else {
        header.classList.remove("text-white");
        header.classList.add("text-primary");
        header.classList.remove("before:bg-gradient-to-b");
      }
    }

    function setPage(number) {
      const pagination = document.querySelector("#pagination");
      if (!pagination) return;

      pagination.querySelectorAll("div").forEach((el) => {
        el.classList = "transition-all";
      });

      const currentPage =
        number === "end"
          ? pagination.querySelector("div:last-child")
          : pagination.querySelector(`div:nth-child(${number})`);

      if (currentPage) {
        currentPage.classList.add(
          "text-primary",
          "text-2xl",
          "font-bold",
          "text-shadow"
        );
      }
    }

    function createPaging() {
      sections.forEach(
        (section, index) => (section.dataset.number = index + 1)
      );

      const pagination = document.querySelector("#pagination");
      if (!pagination) return;

      pagination.innerHTML = "";

      if (pageCount <= 1) return;

      for (let i = 1; i <= pageCount; i++) {
        const page = document.createElement("div");
        page.textContent = i.toString().padStart(2, "0");
        page.classList.add("transition-all");
        pagination.appendChild(page);
      }
    }

    if (sections.length) applyColor(sections[0].dataset.menuColor);

    // createPaging();
    // setPage(1);

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            applyColor(entry.target.dataset.menuColor);
            setPage(entry.target.dataset.number);
          }
        });
      },
      {
        rootMargin: `-${headerHeight}px 0px -100% 0px`,
        threshold: 0,
      }
    );

    sections.forEach((sec) => observer.observe(sec));
  });
</script>
