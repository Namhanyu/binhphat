---
interface Props {
  index?: number;
  label?: string;
  title?: string;
  subtitle?: string;
  content: string | string[];
  imageSrc: string | string[];
  link?: string;
  reverse?: boolean;
  changeColor?: boolean;
  contentClass?: string;
  menuColor?: string;
}

const {
  index,
  label,
  title,
  subtitle = "",
  content,
  imageSrc,
  link,
  reverse = false,
  changeColor = false,
  contentClass,
  menuColor = "white",
} = Astro.props as Props;

let images: Array<{
  src: string;
  alt?: string;
}> = [];

if (Array.isArray(imageSrc)) {
  images = imageSrc.map((src) => ({ src, alt: title }));
} else if (typeof imageSrc === "string" && imageSrc) {
  images = [{ src: imageSrc, alt: title }];
}

const idx = String(index).padStart(2, "0");
const showIndex = index !== undefined && index !== null;

import ReadMore from "../atoms/ReadMoreButton.astro";
import HeroSwiper from "../molecules/HeroSwiper.astro";
---

<section
  class={`feature-section-v2 grid grid-cols-1 lg:grid-cols-2 gap-0 text-black pt-[50px] ${reverse ? "lg:gap-[111px]" : "lg:gap-0"}`}
  data-menu-color={menuColor}
>
  <div
    class={`feature-v2-content flex flex-col justify-between pt-[50px] pb-0 lg:pb-[86px] px-[25px] ${reverse ? "order-2 lg:order-2" : "lg:ps-[108px] order-2 lg:order-1"}`}
  >
    <div class="lg:max-w-[444px]">
      {
        showIndex && (
          <div class="flex items-center gap-[8px] leading-[18px]">
            <span class="text-[12px] lg:text-[11px] font-URWClassico">
              {idx}
            </span>
            <span class="w-[37px] lg:w-[46px] border-t border-black" />
            <span class="text-[13px] lg:text-[15px] font-URWClassico tracking-[0.05em]">
              {label}
            </span>
          </div>
        )
      }

      <div
        class={`${showIndex ? "pt-[35px] lg:pt-[45px]" : "pt-0"} ${reverse ? "lg:ps-[21px] lg:pe-[124px]" : "lg:ps-[20px]"} px-[15px] lg:px-0`}
      >
        {
          title && (
            <h2 class="text-[35px] lg:text-[43px] leading-[1] font-URWClassico tracking-[0.05em]">
              {title}
            </h2>
          )
        }

        {
          subtitle && (
            <p
              class="text-[15px] lg:text-[20px] leading-[26px] lg:leading-[38px] pt-[20px] lg:pt-[30px]"
              set:html={subtitle}
            />
          )
        }

        {
          Array.isArray(content) ? (
            content.map((text) => (
              <p
                class={`text-[13px] lg:text-[14px] leading-[28px] lg:leading-[33px] pt-[40px] whitespace-pre-line ${contentClass}`}
                set:html={text}
              />
            ))
          ) : (
            <p
              class={`text-[13px] lg:text-[14px] leading-[28px] lg:leading-[33px] pt-[40px] whitespace-pre-line ${contentClass}`}
              set:html={content}
            />
          )
        }
      </div>
    </div>

    {
      link && (
        <div
          class={`px-[15px] lg:px-0 pt-[42px] lg:pt-0 group ${
            reverse ? "lg:ps-[21px] lg:pe-[124px]" : "lg:ps-[20px]"
          }`}
        >
          <ReadMore link={link} />
        </div>
      )
    }
  </div>

  <div
    class={`feature-v2-image ${reverse ? "order-1 lg:order-1" : "order-1 lg:order-2"}`}
    class:list={{
      "justify-items-end": reverse,
    }}
  >
    <div class="relative w-5/6 lg:w-full h-[385px] lg:h-[675px]">
      {
        images.length > 1 ? (
          <HeroSwiper
            className="w-full h-full object-cover object-center"
            images={images}
            showPagination={true}
          />
        ) : (
          images[0] && (
            <img
              src={images[0].src}
              alt={images[0].alt}
              class="w-full h-full object-cover object-center"
            />
          )
        )
      }

      {
        showIndex && (
          <div
            class={`absolute top-[74px] rotate-90 lg:origin-top-left ${reverse ? "left-[-100px] lg:left-[65px]" : "right-[-105px] lg:right-[-150px]"}`}
          >
            <div class="flex items-center gap-[14px]">
              <span
                class={`text-[15px] leading-[50px] font-URWClassico ${changeColor ? "text-black lg:text-white" : "text-black"}`}
              >
                {idx} â€“ {title}
              </span>
              <span
                class={`w-[89px] lg:w-[145px] border-t ${changeColor ? "border-black lg:border-white" : "border-black "}`}
              />
            </div>
          </div>
        )
      }
    </div>
  </div>
</section>
