---
import { Icon } from "astro-icon/components";
import BlancDeStyleUn from "../atoms/logo/BlancDeStyleUn.astro";
import HamamatsuLesQuatreSaisons from "../atoms/logo/HamamatsuLesQuatreSaisons.astro";
import HamanakoGreenSprings from "../atoms/logo/HamanakoGreenSprings.astro";
import Logo from "../atoms/logo/Logo.astro";
import Musee from "../atoms/logo/Musee.astro";
import TheAbbeyChurch from "../atoms/logo/TheAbbeyChurch.astro";
import MainButton from "../molecules/MainButton.astro";
import ActionButton from "../molecules/ActionButton.astro";
import TextWithLine from "../atoms/TextWithLine.astro";

interface ActionButtonItem {
  component: string;
  subTitle: string;
  link: string;
}

interface MainButtonItem {
  title: string;
  subTitle: string;
  description: string;
  link: string;
  variant: string;
}

interface NavItem {
  title: string;
  link: string;
}

const { isRestaurant = false } = Astro.props;

const footerActionButtons = isRestaurant
  ? [
      {
        component: "HeaderLogo",
        subTitle: "宿泊のご予約",
        link: "/",
      },
      {
        component: "PalmSpringLogo",
        subTitle: "特設サイト",
        link: "/",
      },
    ] as ActionButtonItem[]
  : [
      {
        title: "restaurant",
        subTitle: "レストランのみのご予約",
        description: "浜名湖の恵みを味わう四季折々の優しいフレンチ",
        link: "/restaurant",
        variant: "default",
      },
      {
        title: "wedding",
        subTitle: "挙式サイト",
        description: "美食と絶景のオーベルジュウェディング",
        link: "/wedding",
        variant: "default",
      },
    ] as MainButtonItem[];

const footerNavItems: NavItem[] = isRestaurant
  ? [
      { title: "dinner course", link: "/restaurant/dinner" },
      { title: "lunch course", link: "/restaurant/lunch" },
      { title: "party plan", link: "/restaurant/others#party-plan" },
      { title: "anniversaire course", link: "/restaurant/others#anniversaire-course" },
      { title: "tea pairing", link: "/restaurant/others#tea-pairing" },
      { title: "propose plan", link: "/restaurant/others#propose-plan" },
    ]
  : [
      { title: "story", link: "/story" },
      { title: "food", link: "/food" },
      { title: "room", link: "/room" },
      { title: "facility", link: "/facility" },
      { title: "Q&A", link: "/faq" },
      { title: "access", link: "/access" },
    ];

const reservationButton = isRestaurant
  ? {
      title: "wedding",
      link: "/wedding",
      description: "美食と絶景のオーベルジュウェディング",
    }
  : {
      title: "reservation",
      link: "/reservation",
      subTitle: "ご宿泊のご予約",
    };
---

<div class="container text-black">
  <div
    class="flex justify-start items-center pb-[77px] gap-[25px] md:gap-[18px]"
  >
    <p class="text-sm font-URWClassico">operating company by</p>
   
    <img
      src="/images/styleun.webp"
      alt="Style Un"
      class="w-[88px] md:w-[146px]"
    />
  </div>

  <div class="pb-20">
    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-12">
      {/* Accommodation */}
      <div class="text-center">
        <div class="border-l-[1px] border-black pl-5 text-left mb-[30px]">
          <p class="text-[13px] leading-[13px] font-URWClassico mb-[9px]">
            accommodation
          </p>
          <p class="text-[17px] leading-[25px]">宿泊施設</p>
        </div>

        <div class="space-y-[30px]">
          <div>
            <Logo class="text-black" />
          </div>

          <HamanakoGreenSprings class="text-black" />
        </div>
      </div>

      {/* Restaurant */}
      <div class="text-center">
        <div class="border-l-[1px] border-black pl-5 text-left mb-[30px]">
          <p class="text-[13px] leading-[13px] font-URWClassico mb-[9px]">
            restaurant
          </p>
          <p class="text-[17px] leading-[25px]">レストラン</p>
        </div>

        <div class="space-y-[30px]">
          <div>
            <Logo class="text-black" />
          </div>

          <HamamatsuLesQuatreSaisons />
        </div>
      </div>

      {/* Wedding */}
      <div class="text-center">
        <div class="border-l-[1px] border-black pl-5 text-left mb-[30px]">
          <p class="text-[13px] leading-[13px] font-URWClassico mb-[9px]">
            wedding
          </p>
          <p class="text-[17px] leading-[25px]">ウェディング</p>
        </div>

        <div class="space-y-[30px]">
          <div>
            <Logo class="text-black" />
          </div>

          <TheAbbeyChurch />
        </div>
      </div>
      <div class="text-center mt-auto mb-5">
        <div class="space-y-[30px]">
          <HamamatsuLesQuatreSaisons />

          <Musee />

          <BlancDeStyleUn />
        </div>
      </div>
    </div>
  </div>
</div>

{/* Footer */}
<footer class="bg-black text-white font-URWClassico relative flex">
  <div class="container pt-[64px] md:pt-[62px] pb-[188px] md:pb-[110px]">
    <div class="grid md:grid-cols-2 gap-2">
      {/* Left Column */}
      <div>
        <div class="mb-12">
          <Logo class="text-default" />
        </div>

        <div class="space-y-4 text-sm font-URWClassico">
          <div>
            <p class="mb-2">
              a. 317-93 yokoyama, kosai-shi, shizuoka, 431-0401, japan
            </p>
            <p>t. 053-578-1000 / f. 053-578-3100</p>
          </div>

          <div>
            <p>c. irregular holidays</p>
            <p>p. 40 spaces</p>
          </div>
        </div>

        <div class="absolute left-[39px] bottom-[76px] md:relative md:left-0 md:bottom-0 md:mt-[112px] ">
          <p class="text-xs text-gray-400">© les quatre saisons</p>
        </div>
      </div>

      {/* Right Column */}
      <div>
        <div
          class="flex flex-col md:flex-row justify-start md:justify-end items-start md:items-center gap-2 md:gap-12 mb-[90px] font-URWClassico mt-[72px] md:mt-0"
        >
          <nav class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-[17px] md:gap-y-2">
            {
              footerNavItems.map((item: NavItem) => (
                <a
                  href={item.link}
                  class="block text-[14px] leading-[20px] hover:text-gray-300 font-URWClassico"
                >
                  {item.title}
                </a>
              ))
            }
          </nav>
        </div>

        {
          !isRestaurant && (
            /* Reservation Form */
            <div class="bg-foreground p-5 rounded">
              <MainButton
                title={reservationButton.title}
                link={reservationButton.link}
                subTitle={reservationButton.subTitle}
                buttonClass="border-b pb-3 border-default text-default"
                showLine={false}
              />
            </div>
          )
        }

        {/* Service Links */}
        <div class="grid md:grid-cols-2 grid-cols-1 gap-4 mt-8">
          {
            !isRestaurant
              ? (footerActionButtons as MainButtonItem[]).map((item) => (
                  <div>
                    <div class="mb-2">
                      <TextWithLine
                        text={item.subTitle}
                        variant="default"
                        showLine={true}
                      />
                    </div>
                    <div class="bg-transparent rounded border border-default p-2">
                      <MainButton
                        title={item.title}
                        description={item.description}
                        link={item.link}
                        buttonClass="text-default"
                        descriptionClass="text-[10px]"
                        showLine={false}
                      />
                    </div>
                  </div>
                ))
              : (footerActionButtons as ActionButtonItem[]).map((item) => (
                  <div class="bg-foreground rounded">
                    <ActionButton
                      {...item}
                      class="w-full"
                      theme="dark"
                      noBorder={true}
                    />
                  </div>
                ))
          }
        </div>

        {
          isRestaurant && (
            /* Wedding Button for Restaurant */
            <div class="mt-4 lg:mt-6 mb-2">
              <TextWithLine
                text="ウェディング"
                variant="default"
                showLine={true}
              />
            </div>
            <div class="bg-transparent rounded border border-default p-2 ">
              <MainButton
                title={reservationButton.title}
                link={reservationButton.link}
                subTitle={reservationButton.subTitle}
                description={reservationButton.description}
                buttonClass="text-default"
                descriptionClass="text-[10px]"
                showLine={false}
              />
            </div>
          )
        }
      </div>
    </div>
  </div>

  <div
    class="flex py-16 px-3 xs:px-[39px] xl:absolute top-[64px] md:top-[62px] right-16 flex-col items-center justify-between gap-20"
  >
    {/* Social Media Icons */}
    <div class="flex flex-col gap-4 mb-auto">
      <a href="https://www.facebook.com/quatremariage" target="_blank" aria-label="facebook link">
        <Icon name="mdi:facebook" class="w-6 h-6 text-default" />
      </a>
      <a
        href="https://www.instagram.com/quatresaisons.restaurant/?hl=ja"
        target="_blank"
        aria-label="instagram link"
      >
        <Icon name="mdi:instagram" class="w-6 h-6 text-default" />
      </a>
    </div>

    {/* Bottom Section */}
    <div
      class="group flex flex-col items-center gap-1 cursor-pointer"
      onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
    >
      <div class="flex items-end gap-1">
        <div
          class="w-0.5 h-8 bg-default group-hover:h-12 transition-all duration-300"
        >
        </div>
        <div
          class="w-0.5 h-12 bg-default group-hover:h-12 transition-all duration-300"
        >
        </div>
      </div>

      <span class="text-lg tracking-wide">top</span>
    </div>
  </div>
</footer>

<script>
  // Smooth scroll with 100px offset for footer hash links
  document.addEventListener("DOMContentLoaded", function () {
    function handleSmoothScrollToHash(hash: string) {
      if (hash) {
        // Remove the hash from URL temporarily to prevent immediate jump
        window.history.replaceState({}, "", window.location.pathname);

        // Wait a bit for the page to fully render
        setTimeout(() => {
          const target = document.getElementById(hash.slice(1));
          if (target) {
            const targetPosition = target.offsetTop - 100; // 100px offset from top
            window.scrollTo({
              top: targetPosition,
              behavior: "smooth",
            });
            // Restore the hash in URL
            window.history.replaceState(
              {},
              "",
              window.location.pathname + hash
            );
          }
        }, 100);
      }
    }

    // Add click handlers to footer navigation links
    const footerNav = document.querySelector("footer nav");
    if (footerNav) {
      footerNav.addEventListener("click", function (event) {
        const target = event.target as HTMLElement;
        if (target) {
          const clickedLink = target.closest("a");
          if (clickedLink) {
            const href = clickedLink.getAttribute("href");

            // Check if it's a hash link on the current page
            if (href && href.includes("#")) {
              const [pathname, hash] = href.split("#");
              const currentPath = window.location.pathname;

              // If it's the same page or just a hash
              if (!pathname || pathname === currentPath) {
                event.preventDefault(); // Prevent default link behavior
                handleSmoothScrollToHash("#" + hash);
              }
            }
          }
        }
      });
    }
  });
</script>
