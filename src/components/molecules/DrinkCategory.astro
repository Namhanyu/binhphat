---
import DrinkItemFull from "./DrinkItemFull.astro";
import DrinkItemCard from "./DrinkItemCard.astro";
import type { DrinkCategory } from "../../types/drink";

interface Props {
  category: DrinkCategory;
}

const { category } = Astro.props as Props;

function getDrinkListClass(type?: "default" | "flex" | "cols-3") {
  switch (type) {
    case "flex":
      return "grid grid-cols-1 lg:grid-cols-1 gap-[30px] lg:gap-x-[16rem] lg:gap-y-[44px]";
    case "cols-3":
      return "grid grid-cols-1 lg:grid-cols-3 gap-[30px] lg:gap-x-[16rem] lg:gap-y-[97px]";
    default:
      return "grid grid-cols-1 lg:grid-cols-2 gap-[30px] lg:gap-x-[16rem] lg:gap-y-[97px]";
  }
}

const fullWidthItems = category.items.filter(
  (item) =>
    item.isFullWidth ||
    (item.note && typeof item.note !== "string" && item.note.length > 0)
);

const gridItems = category.items.filter((item) => !item.note);
---

<div class="category-section mb-[100px] lg:mb-[173px]">
  <h3 class="text-[20px] lg:text-[27px] text-start font-URWClassico">
    {category.name}
  </h3>

  {
    category.nameJa && (
      <p class="text-[14px] lg:text-[15px] leading-[22px] mt-[9px] lg:mt-[11px]">
        {category.nameJa}
      </p>
    )
  }

  <div class="w-[4%] min-w-[45.5px] h-[0.5px] bg-black mt-[20px] lg:mt-[25px]">
  </div>

  {fullWidthItems.map((item) => <DrinkItemFull item={item} />)}

  {
    gridItems.length > 0 && (
      <div
        class={`drinks-grid mt-[30px] lg:mt-[68.5px] ${category.drinkListClass || getDrinkListClass(category?.drinkListType)}`}
      >
        {gridItems.map((item) => (
          <DrinkItemCard item={item} drinkListType={category.drinkListType} />
        ))}
      </div>
    )
  }
</div>
